#
# Author: Mirco Nasuti
#
# External references:
# * VIRTUA_APIRequirements_PocCHUV_1.3.pdf
#

swagger: '2.0'
info:
  title: 'Medical Informatics Platform API'
  description: 'Serve data to the MIP application'
  version: 1.0.0
host: hbp-mip.chuv.ch
schemes:
  - https
basePath: /v1
produces:
  - application/json
paths:
  /articles:
    get:
      summary: 'Get articles'
      operationId: 'get articles'
      tags:
        - Articles
      parameters:
      - name: own
        in: query
        required: false
        type: boolean
        description: 'Only ask own articles'
      - name: status
        in: query
        required: false
        type: string
        format: '{"draft","published","closed"}'
        description: 'Only ask results matching status'
      - name: team
        in: query
        required: false
        type: boolean
        description: 'Only ask articles from own team'
      - name: valid
        in: query
        required: false
        type: boolean
        description: 'Only ask valid articles'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/Article'
    post:
      summary: 'Create an article'
      operationId: 'add an article'
      tags:
        - Articles
      parameters:
      - name: article
        in: body
        description: 'Article to create'
        required: true
        schema:
          type: object
          $ref: "#/definitions/Article"
      responses:
        '200':
          description: 'Article created'

  /articles/{slug}:
    get:
      summary: 'Get an article'
      operationId: 'get an article'
      tags:
        - Articles
      parameters:
        - name: slug
          in: path
          description: 'slug'
          required: true
          type: string
      responses:
        '200':
          description: 'Found'
          schema:
            type: object
            $ref: '#/definitions/Article'
        '404':
          description: 'Not found'
    put:
      summary: 'Update an article'
      operationId: 'update an article'
      tags:
        - Articles
      parameters:
        - name: slug
          in: path
          description: 'slug'
          required: true
          type: string
        - name: article
          in: body
          description: 'Article to update'
          required: true
          schema:
            type: object
            $ref: "#/definitions/Article"
      responses:
        '200':
          description: 'Article updated'
    delete:
      summary: 'Delete an article'
      operationId: 'delete an article'
      tags:
        - Articles
      parameters:
        - name: slug
          in: path
          description: 'slug'
          required: true
          type: string
      responses:
        '200':
          description: 'Article deleted'

  /models:
    get:
      summary: 'Get models'
      operationId: 'get models'
      tags:
        - Models
      parameters:
      - name: limit
        in: query
        required: false
        type: integer
        description: 'Max number of results'
      - name: own
        in: query
        required: false
        type: boolean
        description: 'Only ask own models'
      - name: team
        in: query
        required: false
        type: boolean
        description: 'Only ask models from own team'
      - name: valid
        in: query
        required: false
        type: boolean
        description: 'Only ask valid models'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/Model'
    post:
      summary: 'Create a model'
      operationId: 'add a model'
      tags:
        - Models
      parameters:
      - name: model
        in: body
        description: 'Model to create'
        required: true
        schema:
          type: object
          $ref: "#/definitions/Model"
      responses:
        '200':
          description: 'Model created'

  /models/{slug}:
    get:
      summary: 'Get a model'
      operationId: 'get a model'
      tags:
        - Models
      parameters:
        - name: slug
          in: path
          description: 'slug'
          required: true
          type: string
      responses:
        '200':
          description: 'Found'
          schema:
            type: object
            $ref: '#/definitions/Model'
        '404':
          description: 'Not found'
    put:
      summary: 'Update a model'
      operationId: 'update a model'
      tags:
        - Models
      parameters:
        - name: slug
          in: path
          description: 'slug'
          required: true
          type: string
        - name: model
          in: body
          description: 'Model to update'
          required: true
          schema:
            type: object
            $ref: "#/definitions/Model"
      responses:
        '200':
          description: 'Model updated'
    delete:
      summary: 'Delete a model'
      operationId: 'delete a model'
      tags:
        - Models
      parameters:
        - name: slug
          in: path
          description: 'slug'
          required: true
          type: string
      responses:
        '200':
          description: 'Model deleted'

  /datasets/{code}:
    get:
      summary: 'Get a dataset'
      operationId: 'get a dataset'
      tags:
        - Datasets
      parameters:
        - name: code
          in: path
          description: 'code'
          required: true
          type: string
      responses:
        '200':
          description: 'Success'
          schema:
            type: object
            $ref: '#/definitions/Dataset'

  /groups:
    get:
      summary: 'Get the root group (containing all subgroups)'
      operationId: 'get the root group'
      tags:
        - Groups
      responses:
        '200':
          description: 'Success'
          schema:
            type: object
            $ref: '#/definitions/Group'

  # TODO: /group/{code} ?

  /variables:
    get:
      summary: 'Get variables'
      operationId: 'get variables'
      tags:
        - Variables
      parameters:
      - name: group
        in: query
        required: false
        type: string
        description: 'List of groups formatted like : ("val1", "val2", ...)'
      - name: subgroup
        in: query
        required: false
        type: string
        description: 'List of subgroups formatted like : ("val1", "val2", ...)'
      - name: isVariable
        in: query
        required: false
        type: string
        description: 'Boolean value formatted like : ("0") or ("1") or ("false") or ("true")'
      - name: isGrouping
        in: query
        required: false
        type: string
        description: 'Boolean value formatted like : ("0") or ("1") or ("false") or ("true")'
      - name: isCovariable
        in: query
        required: false
        type: string
        description: 'Boolean value formatted like : ("0") or ("1") or ("false") or ("true")'
      - name: isFilter
        in: query
        required: false
        type: string
        description: 'Boolean value formatted like : ("0") or ("1") or ("false") or ("true")'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/Variable'

  /variables/{code}:
    get:
      summary: 'Get a variable'
      operationId: 'get a variable'
      tags:
        - Variables
      parameters:
        - name: code
          in: path
          description: 'code of the variable (multiple codes are allowed, separated by ",")'
          required: true
          type: string
      responses:
        '200':
          description: 'Found'
          schema:
            type: object
            $ref: '#/definitions/Variable'
        '404':
          description: 'Not found'

  /variables/{code}/values:
    get:
      summary: 'Get values from a variable'
      operationId: 'get values from a variable'
      tags:
        - Values
        - Variables
      parameters:
        - name: code
          in: path
          description: 'code of the variable'
          required: true
          type: string
        - name: q
          in: query
          required: false
          type: string
          description: 'Pattern to match'
      responses:
        '200':
          description: 'Found'
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/Value'
        '404':
          description: 'Not found'

  /stats/{code}:
    get:
      summary: 'Get the statistics for a group or a variable'
      operationId: 'Get the statistics for a group or a variable'
      tags:
        - Variables
        - Groups
        - Statistics
      parameters:
        - name: code
          in: path
          description: 'code of the group or variable'
          required: true
          type: string
      responses:
        '200':
          description: 'Found'
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/Statistics'
        '404':
          description: 'Not found'

definitions:

  Article:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: 'Unique identifier'
      status:
        type: string
        format: '{"draft","published","closed"}'
        description: 'Status'
      title:
        type: string
        description: Title
      slug:
        type: string
        description: 'Short string identifier'
      abstract:
        type: string
        description: 'Short introduction'
      content:
        type: string
        description: 'Content'
      publishedAt:
        type: string
        format: dateTime
        description: 'Publication date'
      createdAt:
        type: string
        format: dateTime
        description: 'Creation date'
      updatedAt:
        type: string
        format: dateTime
        description: 'Update date'
      createdBy:
        $ref: "#/definitions/User"
        description: 'Author'
      updatedBy:
        $ref: "#/definitions/User"
        description: 'Updater'
      tags:
        type: array
        items:
          $ref: "#/definitions/Tag"

  User:
    description: 'A user of the MIP portal'
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: 'Unique identifier'
      fullname:
        type: string
        description: 'Fullname'
      username:
        type: string
        description: 'Username'
      firstname:
        type: string
        description: 'Firstname'
      lastname:
        type: string
        description: 'Lastname'
      picture:
        type: string
        description: 'Path to a profile picture'
      web:
        type: string
        description: 'Personnal web site URL'
      phone:
        type: string
        description: 'Phone number'
      # TODO: shouldn't that be a date?
      birthday:
        type: string
        description: 'Birthday date'
      gender:
        type: string
        enum:
          - male
          - female
        description: 'Gender'
      city:
        type: string
        description: 'City'
      country:
        type: string
        description: 'Country'
      password:
        type: string
        description: 'password'
      email:
        type: string
        format: email
        description: 'E-mail address'
      apikey:
        type: string
        description: 'API key'
      team:
        type: string
        description: 'Team'
      isActive:
        type: boolean
        description: 'Is it active ?'
      languages:
        type: array
        items:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
        description: 'Languages'
      roles:
        type: array
        items:
          type: string
        description: 'Roles'

  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: 'Unique identifier'
      name:
        type: string
        description: 'Name'

  Chart:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: 'Unique identifier'
      chartType:
        type: string
        description: 'Chart type'
      xAxis:
        type: string
        description: 'X axis label'
      chartConfigSets:
        type: array
        items:
          $ref: "#/definitions/ChartConfigSet"
        description: 'Chart configuration'

  ChartConfigSet:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: 'Unique identifier'
      code:
        type: string
        description: 'Code'
      label:
        type: string
        description: 'Label'
      color:
        type: string
        description: 'Color'

  Dataset:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: 'Unique identifier'
      code:
        type: string
        description: 'Code'
      date:
        type: string
        format: dateTime
        description: 'Date'
      header:
        type: array
        items:
          type: string
        description: 'Header'

  Model:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: 'Unique identifier'
      title:
        type: string
        description: 'Title'
      slug:
        type: string
        description: 'slug'
      description:
        type: string
        description: 'Description'
      query:
        type: object
        $ref: "#/definitions/Query"
        description: 'Query'
      dataset:
        type: object
        $ref: "#/definitions/Dataset"
        description: 'Dataset'
      valid:
        type: boolean
        description: 'Is it valid ?'
      chart:
        type: object
        $ref: "#/definitions/Chart"
        description: 'Chart'
      createdAt:
        type: string
        format: dateTime
        description: 'Creation date'
      updatedAt:
        type: string
        format: dateTime
        description: 'Update date'
      createdBy:
        type: object
        $ref: "#/definitions/User"
        description: 'Author'
      updatedBy:
        type: object
        $ref: "#/definitions/User"
        description: 'Updater'

  Filter:
    type: object
    description: A filter in a query
    properties:
      id:
        type: integer
        format: int64
        description: 'Unique identifier'
      variable:
        description: 'Variable used to filter, only code value is sent'
        type: object
        $ref: "#/definitions/Variable"
        description: 'Variable'
      operator:
        description: 'Filter operator : eq, lt, gt, gte, lte, neq, in, notin, between'
        type: string
        description: 'Operator'
        enum:
          - eq
          - lt
          - gt
          - gte
          - lte
          - neq
          - in
          - notin
          - between
      values:
        description: |
          List of values used to filter.
          With operators “eq”, “lt”, “gt”, “gte”, “lte”, ”neq”, the filter mode “OR” is used.
          With operator “between”, only two values are sent, they represents the range limits.
        type: array
        items:
          type: string

  # TODO: Query is not a really descriptive name
  Query:
    type: object
    description: |
      A query object represents a request to the CHUV API.
      This object contains all information required by the API to compute a result (dataset) and return it.
    properties:
      # TODO: is the id needed here?
      id:
        type: integer
        format: int64
        description: 'Unique identifier'
      variables:
        description: 'List of variables used by the request, only code values are sent'
        type: array
        items:
          type: object
          $ref: "#/definitions/Variable"
        description: 'Variables'
      covariables:
        description: |
          List of covariables used by the request, only code values are sent.
          These variables are returned in dataset object header.
        type: array
        items:
          type: object
          $ref: "#/definitions/Variable"
        description: 'Covariables'
      grouping:
        description: 'List of grouping variables used by the request, only code values are sent'
        type: array
        items:
          type: object
          $ref: "#/definitions/Variable"
        description: 'Grouping'
      filters:
        description: 'List of filters objects used by the request'
        type: array
        items:
          type: object
          $ref: "#/definitions/Filter"
        description: 'Filters'
      # TODO: request should be renamed to plotType
      request:
        type: string
        description: 'Plot type'

  GroupId:
    description: Identifier for a group
    type: object
    required:
      - code
    properties:
      code:
        type: string
        description: Unique group code
      label:
        type: string
        description: Group label

  Group:
    description: |
      A group object represents a variable scope. Each variable is associated to a group.
      Each group can be contained in other group. The group chaining can be interpreted like a hierarchy.
    allOf:
      - $ref: '#/definitions/GroupId'
      - type: object
        properties:
          id:
            type: integer
            format: int64
            description: 'Unique identifier'
          code:
            type: string
            description: 'Code'
          label:
            type: string
            description: 'Label'
          groups:
            type: array
            items:
              type: object
              $ref: "#/definitions/GroupId"
            description: 'Groups'

  # TODO: what is this for? I would rename that to VariableId, as it seems to carry only the identify of a variable, without its full description
  Value:
    type: object
    description: XXX.
    properties:
      # TODO: (LC) is the id necessary? The code seems enough as an identifier
      id:
        type: integer
        format: int64
        description: 'Unique identifier'
      code:
        type: string
        description: 'Code'
      label:
        type: string
        description: 'Label'

  Variable:
    type: object
    description: Description of a variable. A variable points to a vector of values.
    properties:
      id:
        type: integer
        format: int64
        description: 'Unique identifier'
      group:
        type: object
        $ref: "#/definitions/Group"
        description: 'Variable group (only the variable path)'
      code:
        type: string
        description: 'Code'
      label:
        type: string
        description: 'Label'
      type:
        type: string
        description: 'Type of the variable'
        enum:
          - integer
          - text
          - number
          - date
          - boolean
      length:
        type: integer
        description: 'Length'
      isVariable:
        type: boolean
        description: 'Can the variable can be used as a variable?'
      isGrouping:
        type: boolean
        description: 'Can the variable can be used as a group?'
      isVariable:
        type: boolean
        description: 'Can the variable can be used as a covariable?'
      isFilter:
        type: boolean
        description: 'Can the variable can be used as a filter?'
      values:
        type: array
        items:
          type: object
          $ref: "#/definitions/Value"
        description: 'List of variable values (if is an enumeration variable)'

  Dataset:
    type: object
    properties:
      data:
        description: 'A block of data'
        type: array
        items:
          type: object
          properties:
            - name:
                type: string
                description: 'Name of the data element'
            - justification:
                description: |
                  Justification for the existance of this data element.
                  A data element can be present because it is either:
                    * the single response to a query
                    * the consequence to a grouping clause in the query
                    * the consequence to the selection of a covariable in the query
                type: string
                enum:
                  - query
                  - grouping
                  - covariable
            - data:
                description: 'The data'
                type: object
                $ref: '#/definitions/Data'

  Data:
    type: object
    discriminator: 'dataType'
    properties:
      shape:
        type: string
        enum:
          - Point
          - Vector
          - Table
          - Matrix

  # TODO: merge Value into this type
  Point:
    description: 'A data point representing a single value'
    allOf:
      - $ref: '#/definitions/Data'
      - type: object
        properties:
          code:
            type: string
            description: 'Code'
          label:
            type: string
            description: 'Label'

  Vector:
    description: 'A list of values, each value can be associated with a name'
    allOf:
      - $ref: '#/definitions/Data'
      - type: object
        properties:
          header:
            description: 'List of names associated with each values'
            type: array
            items:
              type: string
          values:
            description: 'The list of values of the vector'
            type: array
            items:
              type: string | numeric

  Table:
    description: 'A table of values'
    allOf:
      - $ref: '#/definitions/Data'
      - type: object
        properties:
          rowHeader:
            description: 'Names for the rows'
            type: array
            items:
              type: string
          columnHeader:
            description: 'Names for the columns'
            type: array
            items:
              type: string
          values:
            description: 'The list of values of the table represented as an array of dimension 2'
            type: array
            items:
              type: array
              items:
                type: string | numeric

  Statistics:
    type: object
    discriminator: 'dataType'
    properties:
      code:
        type: string
        description: 'Code of the variable or group being described'
      dataType:
        type: string
        enum:
          - SummaryStatistics
          - DatasetStatistics
        description: 'Type of the data'
    required:
      - code
      - dataType

  SummaryStatistics:
    description: 'Statistics describing a vector of values'
    allOf:
      - $ref: '#/definitions/Statistics'
      - type: object
        required:
          - count
        properties:
          size:
            description: 'size (count) of distinct values for categorial variables'
            type: integer
            format: int32
            minimum: 0
          count:
            description: 'total (non-distinct) count of values'
            type: integer
            format: int32
            minimum: 0
          na:
            description: 'number of empty (Not Available) values'
            type: integer
            format: int32
            minimum: 0
          max:
            description: 'maximum value (numbers only)'
            type: number
          min:
            description: 'minimum value (numbers only)'
            type: number
          q1:
            description: 'first quartile (numbers only)'
            type: number
          q3:
            description: 'third quartile (numbers only)'
            type: number
          median:
            description: 'median value (numbers only)'
            type: number
          mean:
            description: 'population average (numbers only)'
            type: number
          sum:
            description: 'population sum (numbers only)'
            type: number
          stddev:
            description: 'population standard deviation (numbers only)'
            type: number
          variance:
            description: 'population variance (numbers only)'
            type: number

  DatasetStatistics:
    description: 'Generic Statistics data'
    allOf:
      - $ref: '#/definitions/Statistics'
      - type: object
        required:
          - dataset
        properties:
          dataset:
            description: 'Dataset containing the data for the statistics'
            type: object
            $ref: '#/definitions/Dataset'
